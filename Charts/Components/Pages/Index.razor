@page "/"
@using Server.Models
@inject ApiService ApiService
@inject IJSRuntime Js
@rendermode InteractiveServer

@* Todo
- another data point instead of temp
- link to long/lat picker
*@

<PageTitle>Blazor Weather App</PageTitle>

<script>
    window.registerViewportChangeCallback = (dotnetHelper) => {
        window.addEventListener('load', () => {
            dotnetHelper.invokeMethodAsync('OnResize', window.innerWidth, window.innerHeight);
        });
        window.addEventListener('resize', () => {
            dotnetHelper.invokeMethodAsync('OnResize', window.innerWidth, window.innerHeight);
        });
    }

    var lockResolver;
    if (navigator && navigator.locks && navigator.locks.request) {
        const promise = new Promise((res) => {
            lockResolver = res;
        });

        navigator.locks.request('unique_lock_name', { mode: "shared" }, () => {
            return promise;
        });
    }
</script>

<div class="container">
    <div class="input-section">
        Lat: <input type="text" @bind="Latitude" placeholder="Latitude" pattern="-?\d+(\.\d*)?" oninput="this.value = this.value.replace(/[^0-9\.]/g, '');">
        Long: <input type="text" @bind="Longitude" placeholder="Longitude" pattern="-?\d+(\.\d*)?" oninput="this.value = this.value.replace(/[^0-9\.]/g, '');">
        @if (_displayIcon)
        {
            <button @onclick="RefreshData" type="button" class="btn btn-primary" style="font-family: Lucida Sans Unicode;">&#x21bb;</button>
        }
        else
        {
            <button @onclick="RefreshData" type="button" class="btn btn-primary">Refresh</button>
        }
        @if (IsDataAvailable == false)
        {
            <br />
            <span style="color: red">Please choose coordinates inside Germany.</span>
        }
    </div>

    <div class="weather-container">
        <h3>Current Weather</h3>
        <h4>Station: @StationName</h4>
        @if (CurrentWeather == null)
        {
            <p>Loading....</p>
        }
        else
        {
            <div class="current-temp">
                @switch (Icon)
                {
                    case "sunny":
                        @:<img src="/images/sunny.png" alt="Sunny" id="weatherImage">
                        break;

                    case "cloudy":
                        @:<img src="/images/cloudy.png" alt="Cloudy" id="weatherImage">
                        break;

                    case "partly-cloudy":
                        @:<img src="/images/partly-cloudy.png" alt="Partly Cloudy" id="weatherImage">
                        break;

                    case "rainy":
                        @:<img src="/images/rainy.png" alt="Rainy" id="weatherImage">
                        break;

                    case "thunderstorm":
                        @:<img src="/images/thunderstorm.png" alt="Thunderstorm" id="weatherImage">
                        break;

                    case "clear-night":
                        @:<img src="/images/clear-night.png" alt="Clear Night" id="weatherImage">
                        break;

                    case "cloudy-night":
                        @:<img src="/images/cloudy-night.png" alt="Cloudy Night" id="weatherImage">
                        break;

                }
                <span class="label" id="temperature">@Temperature °C</span>
            </div>

            <div class="data-group">
                <div class="data-item">
                    <i class="fas fa-thermometer-half"></i>
                    <span class="label">Temperature:</span>
                    <span class="value" id="temperature">@Temperature °C</span>
                </div>
                <div class="data-item">
                    <i class="fas fa-tint"></i>
                    <span class="label">Dew Point:</span>
                    <span class="value" id="dewpoint">@(DewPoint) °C</span>
                </div>
            </div>

            <div class="data-group">
                <div class="data-item">
                    <i class="fas fa-water"></i>
                    <span class="label">Humidity:</span>
                    <span class="value" id="humidity">@_humidity %</span>
                </div>
                <div class="data-item">
                    <i class="fas fa-cloud"></i>
                    <span class="label">Cloud Cover:</span>
                    <span class="value" id="cloudCover">@CloudCover %</span>
                </div>
                <span class="last-update">(Last updated: @LastUpdatedTime)</span>
            </div>
        }
    </div>

    <div class="historical-averages">
        <h3>Historical Data for @DateTime.Now.ToString("dd MMM")</h3>
        <HistoricalAverages Data="@HistoricalAverages"></HistoricalAverages>
    </div>
    
    <div class="linechart">
        <h3>Mean Temperatures and Precipitation for @DateTime.Now.ToString("MMMM")</h3>
        <WeatherChart Temperatures="@Temperatures" Width="@Width" @rendermode="@RenderMode.InteractiveServer" />
    </div>

    <div class="get-source-code">
        <a href="https://github.com/extrasharp/BlazorWeatherApp" type="button" class="btn btn-primary">Source Code</a>
    </div>
</div>


@code {

    #region Private Members
    private DateTime LastUpdated { get; set; }
    private string LastUpdatedTime
    {
        get
        {
            var cstTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(LastUpdated, "Central European Standard Time");
            return cstTime.ToString("HH:mm");
        }
    }
    private WeatherService? _weatherService;
    private string Width { get; set; } = "730";
    private List<ChartDataModel> Temperatures = [];
    private int ViewportWidth { get; set; }
    private int ViewportHeight { get; set; }
    private WeatherResponseModel? CurrentWeather { get; set; }
    private string? StationName { get; set; }
    private bool IsDataAvailable { get; set; } = true;
    private WeatherDataModel HistoricalAverages { get; set; } = new();
    private double? CloudCover { get; set; }
    private string Latitude { get; set; }
    private string Longitude { get; set; }
    private string? Icon { get; set; }
    private static bool _bigWindowSize = true;

    private double? _temperature;
    private double? Temperature
    {
        get => _temperature;
        set => _temperature = value.HasValue ? Math.Round(value.Value, 1) : null;
    }
    private double? _humidity;

    bool _displayIcon = false; 

    private double? _dewPoint;
    private double? DewPoint
    {
        get => _dewPoint;
        set => _dewPoint = value.HasValue ? Math.Round(value.Value, 1) : null;
    }
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        SetInitialCoordinates();
       
        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
            // var dimension = await Js.InvokeAsync<WindowDimension>("getWindowDimensions");
        }
    }

    [JSInvokable]
    public void OnResize(int width, int height)
    {
        if (ViewportWidth == width && ViewportHeight == height) return;

        ViewportWidth = width;
        ViewportHeight = height;

        switch (ViewportWidth)
        {
            case < 410:
                Width = "270";
                _displayIcon = true;
                break;
            case < 468:
                Width = "300";
                _displayIcon = false;
                break;
            case < 769:
                Width = "500";
                _displayIcon = false;
                break;
            case < 1000:
                Width = "730";
                _displayIcon = false;
                break;
            case >= 1000:
                Width = "730";
                _displayIcon = false;
                break;
            default:
                Width = "730";
                _displayIcon = false;
                break;
        }
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        CurrentWeather = null;

        if (string.IsNullOrWhiteSpace(Latitude) || string.IsNullOrWhiteSpace(Longitude) || !IsValidCoordinates())
        {
            // Handle validation errors
            return;
        }

        _weatherService = new WeatherService(Latitude, Longitude); 

        CurrentWeather = await ApiService.GetCurrentWeatherData(Latitude, Longitude);

        if (CurrentWeather?.weather != null) 
        {
            AssignValues();
            await GetHistoricDataForToday();
            await GetChartData();
            IsDataAvailable = true;
        }
        else
        {
            IsDataAvailable = false;
        }
    }

    private bool IsValidCoordinates()
    {
        var latitude = double.Parse(Latitude);
        var longitude = double.Parse(Longitude);

        return latitude is <= 90 and >= -90 && longitude is <= 180 and >= -180;
    }

    private void SetInitialCoordinates()
    {
        Latitude = "51.04";
        Longitude = "13.74";
    }

    private async Task GetHistoricDataForToday()
    {
        if (_weatherService != null)
        {
            var weatherData = await _weatherService.GetWeatherDataForDisplay();

            DisplayDailyMeans(weatherData);
        }
    }

    private async Task GetChartData()
    {
        if (_weatherService != null)
        {
            var weatherData = await _weatherService.GetChartDataForDisplay();

            PopulateChartData(weatherData);
        }
    }

    private void PopulateChartData(IReadOnlyCollection<WeatherDataModel> groupedDayModels)
    {
        Temperatures.Clear();

        foreach (var day in groupedDayModels)
        {
            Temperatures.Add(new ChartDataModel { X = day.Day.ToString(), High = day.MaxTemp, Low = day.MinTemp, Precipitation = day.Precipitation });
        }
    }
    
    private void DisplayDailyMeans(IReadOnlyCollection<WeatherDataModel> days)
    {
        CalculateDailyMeans(days);
        FindRecordHighAndLow(days);
    }

    private void CalculateDailyMeans(IReadOnlyCollection<WeatherDataModel> days)
    {
        HistoricalAverages = new WeatherDataModel
        {
            MeanTemp = CalculateAverage(days, x => x.MeanTemp),
            MaxTemp = CalculateAverage(days, x => x.MaxTemp),
            MinTemp = CalculateAverage(days, x => x.MinTemp),
            Precipitation = CalculateAverage(days, x => x.Precipitation),
            SunshineHours = CalculateAverage(days, x => x.SunshineHours),
        };
    }

    private static double CalculateAverage<T>(IEnumerable<T> collection, Func<T, double> selector)
    {
        return collection.Average(selector);
    }

    private void FindRecordHighAndLow(IReadOnlyCollection<WeatherDataModel> days)
    {
        var recordHighData = days.MaxBy(x => x.MaxTemp);
        var recordLowData = days.MinBy(x => x.MinTemp);

        if (recordHighData != null)
        {
            HistoricalAverages.RecordHigh = recordHighData.MaxTemp;
            HistoricalAverages.RecordHighYear = recordHighData.Year;
        }

        if (recordHighData == null || recordLowData == null) return;

        HistoricalAverages.RecordLow = recordLowData.MinTemp;
        HistoricalAverages.RecordLowYear = recordLowData.Year;
    }


    private void AssignValues()
    {
        if (CurrentWeather?.sources != null) StationName = CurrentWeather?.sources[0].StationName;
        Temperature = CurrentWeather?.weather?.Temperature;
        _humidity = CurrentWeather?.weather?.Humidity;
        DewPoint = CurrentWeather?.weather?.DewPoint;
        CloudCover = CurrentWeather?.weather?.CloudCover;
        LastUpdated = CurrentWeather.weather.TimeStamp;
        
        SetWeatherLogo();
    }

    private void SetWeatherLogo()
    {
        Icon = CurrentWeather?.weather?.Icon switch
        {
            "clear-day" => "sunny",
            "cloudy" => "cloudy",
            "rainy" => "rainy",
            "partly-cloudy-day" => "partly-cloudy",
            "thunderstorm" => "thunderstorm",
            "clear-night" => "clear-night",
            "partly-cloudy-night" => "cloudy-night",
            _ => Icon
        };
    }
    #endregion
}
